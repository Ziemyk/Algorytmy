#include <iostream>
using namespace std;
struct Node{
    Node(string keyS="",int keyN=0){
        keyString = keyS;
        keyValue  = keyN;
        next = nullptr;
        son = nullptr;
    }
    int keyValue;
    string  keyString;
    struct Node *next;
    struct Node *son;    //syn
};
void Add(Node* root, string keyString, int firstNumber, int arr[100]){

    if (root == nullptr)
    {
        root = new Node("", 0);
        return;
    }
    Node* rob = root;
    bool canChangeToSon = true;
    for (int i = 1; i <= firstNumber; i++){
        if (rob->son == nullptr && i != firstNumber)
        {
            rob->son = new Node("X", arr[i-1]);
        }
        else if (rob->son == nullptr && i == firstNumber)
        {
            rob->son = new Node(keyString, arr[i-1]);
            return;
        }
        else if (rob->son != nullptr && i == firstNumber && rob->son->keyValue == arr[i-1])
        {
            rob->son->keyString = keyString;
            return;
        }
        else if (rob->son != nullptr)//#TODO dodać warunek który sprawdza czy nie ma juz nexta o takim numerze ale nie wiem czy tu czy w while
        {
            rob = rob->son;
            while (rob->next != nullptr && rob->keyValue != arr[i-1]){
                rob = rob->next;
            }
            if(rob->keyValue != arr[i-1]){
                rob->next = new Node("X",arr[i-1]);
                rob = rob->next;
            }
            if(rob != nullptr && i == firstNumber){
                rob->keyString = keyString;
            }
            canChangeToSon = false;
        }
        if(canChangeToSon){
            rob= rob->son;

        }
         canChangeToSon = true;
    }
}
void displaying_preorder(Node * root){
    if(root){
        cout<<root->keyString<<"\n";
        displaying_preorder(root->son);
        displaying_preorder(root->next);
    }
}
void displaying_postorder(Node *root){
    if(root){
        displaying_postorder(root->son);
        cout<<root->keyString<<"\n";
        displaying_postorder(root->next);
    }
}
int main(){
    std::ios_base::sync_with_stdio(false);
    std::cin.tie(nullptr);
    std::cout.tie(nullptr);
    int n;
    cin>>n;
    Node *tree = new Node("Stan spoczynku",0);
    for(int i=0;i<n;i++){
        string polecenie_t ;
        getline(cin,polecenie_t);
        getline(cin,polecenie_t);
        int deep;
        cin>>deep;
        int *arrayofvalue = new int[deep];
        for(int j=0;j<deep;j++){
            cin>>arrayofvalue[j];
        }
        Add(tree,polecenie_t,deep,arrayofvalue);
        delete []arrayofvalue;
    }
    int x;
    cin>>x;
    if(x == 1){
        displaying_preorder(tree);
    }else if(x == 2){
        displaying_postorder(tree);
    }
}
